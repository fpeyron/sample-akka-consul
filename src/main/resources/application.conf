akka {

  loglevel        = INFO
  stdout-loglevel = INFO

  # Enable metrics extension in akka-cluster-metrics.
  extensions  = ["akka.cluster.metrics.ClusterMetricsExtension"]

  # Enable cluster extension.
  extensions  = ["de.heikoseeberger.constructr.ConstructrExtension"]

  actor {
    provider  = "akka.cluster.ClusterActorRefProvider"
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    log-remote-lifecycle-events = on
    netty.tcp {

      #bind-hostname = "localhost"
      #bind-hostname = ${SERVICE_AKKA_HOST}
      #bind-port     = 2552
      #bind-port     = ${SERVICE_AKKA_PORT}

      hostname      = "10.97.207.22"
      port          = 2550
      hostname      = ${?SERVICE_AKKA_HOST}
      port          = ${?SERVICE_AKKA_PORT}
    }
  }
  cluster {
    seed-node-timeout = 2s

    # Should the 'leader' in the cluster be allowed to automatically mark
    # unreachable nodes as DOWN after a configured time of unreachability?
    # Using auto-down implies that two separate clusters will automatically be
    # formed in case of network partition.
    #
    # Don't enable this in production, see 'Auto-downing (DO NOT USE)' section
    # of Akka Cluster documentation.
    #
    # Disable with "off" or specify a duration to enable auto-down.
    # If a downing-provider-class is configured this setting is ignored.
    #auto-down-unreachable-after = 5s

    # Time margin after which shards or singletons that belonged to a downed/removed
    # partition are created in surviving partition. The purpose of this margin is that
    # in case of a network partition the persistent actors in the non-surviving partitions
    # must be stopped before corresponding persistent actors are started somewhere else.
    # This is useful if you implement downing strategies that handle network partitions,
    # e.g. by keeping the larger side of the partition and shutting down the smaller side.
    # It will not add any extra safety for auto-down-unreachable-after, since that is not
    # handling network partitions.
    # Disable with "off" or specify a duration to enable.
    #down-removal-margin = 1s

    #unreachable-nodes-reaper-interval = 250ms

    failure-detector {
      acceptable-heartbeat-pause  = 10s
      hearbeat-interval           = 250ms
      threshold                   = 4.0
    }

    singleton {

      # When a node is becoming oldest it sends hand-over request to previous oldest,
      # that might be leaving the cluster. This is retried with this interval until
      # the previous oldest confirms that the hand over has started or the previous
      # oldest member is removed from the cluster (+ akka.cluster.down-removal-margin).
      hand-over-retry-interval = 1s

      # The number of retries are derived from hand-over-retry-interval and
      # akka.cluster.down-removal-margin (or ClusterSingletonManagerSettings.removalMargin),
      # but it will never be less than this property.
      min-number-of-hand-over-retries = 5
    }

    singleton-proxy {

      # Interval at which the proxy will try to resolve the singleton instance.
      singleton-identification-interval = 1s

      # If the location of the singleton is unknown the proxy will buffer this
      # number of messages and deliver them when the singleton is identified.
      # When the buffer is full old messages will be dropped when new messages are
      # sent via the proxy.
      # Use 0 to disable buffering, i.e. messages will be dropped immediately if
      # the location of the singleton is unknown.
      # Maximum allowed buffer size is 10000.
      buffer-size = 1000
    }

    # Disable legacy metrics in akka-cluster
    metrics.enabled=off
    http {
      management {
        hostname      = "0.0.0.0"
        port          = 5010
      }
    }
  }
}

http {
  hostname      = "0.0.0.0"
  port          = 5000
  timeout       = "2 seconds"
}

constructr {
  coordination {
    class-name = com.github.everpeace.constructr.coordination.redis.RedisCoordination
    host       = localhost
    port       = 6379
    redis {
      # password   =
      # db         =
    }
  }
  coordination-timeout    = 1 seconds  // Maximum response time for coordination service (e.g. etcd)
  join-timeout            = 2 seconds  // Might depend on cluster size and network properties
  max-nr-of-seed-nodes    = 0          // Any nonpositive value means Int.MaxValue
  nr-of-retries           = 2          // Nr. of tries are nr. of retries + 1
  refresh-interval        = 5 seconds // TTL is refresh-interval * ttl-factor
  retry-delay             = 1 seconds  // Give coordination service (e.g. etcd) some delay before retrying
  ttl-factor              = 2.0        // Must be greater or equal 1 + ((coordination-timeout * (1 + nr-of-retries) + retry-delay * nr-of-retries)/ refresh-interval)!
  ignore-refresh-failures = false      // Ignore failures once machine is already in "Refreshing" state. It prevents from FSM being terminated due to exhausted number of retries.
}